(define (partition pred xs)
  (define (part ps ns xs1 x)
    (= ps '())
    (= ns '())
    (= xs1 xs)
    (= x (car xs1)
    )
  (if (null? xs1)
      (cons ps ns)             
      (if (pred x)
	  (part (cons x ps) ns (cdr xs1))
	  (part ps (cons x ns) (cdr xs1)) ))))

(define (quick_t xs)
  (if (null? xs)
      '()
      (let* ((x (car xs))
             (pn (partition               
                    (lambda (x1)
		      (< x1 x) )
                    (cdr xs) )))
	(append (quick_t (car pn))      
		(list x)                  
		(quick_t (cdr pn)) ))))
(define (quicksort lst)
  (list_reverse (quick_t (numbers_only lst)))
  )
